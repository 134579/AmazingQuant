//???????

//??
#ifdef WIN32
#include "stdafx.h"
#endif
#include <string>
#include <queue>

//Boost
#define BOOST_PYTHON_STATIC_LIB
#include <boost/python/module.hpp>	//python???
#include <boost/python/def.hpp>		//python???
#include <boost/python/dict.hpp>	//python???
#include <boost/python/object.hpp>	//python???
#include <boost/python.hpp>			//python???
#include <boost/thread.hpp>			//??????§Ö???????
#include <boost/bind.hpp>			//??????§Ö???????
#include <boost/any.hpp>			//??????§Ö????????
#include <boost/locale.hpp>			//????????
//API
#include "ThostFtdcMdApi.h"

//???????
using namespace std;
using namespace boost::python;
using namespace boost;

//????
#define ONFRONTCONNECTED 1
#define ONFRONTDISCONNECTED 2
#define ONHEARTBEATWARNING 3
#define ONRSPUSERLOGIN 4
#define ONRSPUSERLOGOUT 5
#define ONRSPERROR 6
#define ONRSPSUBMARKETDATA 7
#define ONRSPUNSUBMARKETDATA 8
#define ONRSPSUBFORQUOTERSP 9
#define ONRSPUNSUBFORQUOTERSP 10
#define ONRTNDEPTHMARKETDATA 11
#define ONRTNFORQUOTERSP 12



///-------------------------------------------------------------------------------------
///API?§Ö???????
///-------------------------------------------------------------------------------------

//GIL????????????
//???????C++?????GIL??????????python????
class PyLock
{
private:
	PyGILState_STATE gil_state;

public:
	//??????????????§Õ??????????????GIL??
	PyLock()
	{
		gil_state = PyGILState_Ensure();
	}

	//???????????????????????????GIL??
	~PyLock()
	{
		PyGILState_Release(gil_state);
	}
};


//???????
struct Task
{
	int task_name;		//??????????????????
	any task_data;		//???????
	any task_error;		//???????
	int task_id;		//????id
	bool task_last;		//????????
};


///??????????
template<typename Data>

class ConcurrentQueue
{
private:
	queue<Data> the_queue;								//????????
	mutable boost::mutex the_mutex;							//boost??????
	condition_variable the_condition_variable;			//boost????????

public:

	//???????????
	void push(Data const& data)
	{
		boost::mutex::scoped_lock lock(the_mutex);				//?????????
		the_queue.push(data);							//??????§Õ???????
		lock.unlock();									//?????
		the_condition_variable.notify_one();			//??????????????????
	}

	//????????????
	bool empty() const
	{
		boost::mutex::scoped_lock lock(the_mutex);
		return the_queue.empty();
	}

	//???
	Data wait_and_pop()
	{
		boost::mutex::scoped_lock lock(the_mutex);

		while (the_queue.empty())						//??????????
		{
			the_condition_variable.wait(lock);			//?????????????
		}

		Data popped_value = the_queue.front();			//????????§Ö???????????
		the_queue.pop();								//?????????
		return popped_value;							//?????????
	}

};


//??????§Ý????????????????????????????????????????
void getInt(dict d, string key, int* value);


//??????§Ý?????????????????????????????????????????
void getDouble(dict d, string key, double* value);


//??????§Ý???????????????????????????????????????
void getChar(dict d, string key, char* value);


//??????§Ý?????????????????????????????????????????
void getStr(dict d, string key, char* value);


///-------------------------------------------------------------------------------------
///C++ SPI???????????????
///-------------------------------------------------------------------------------------

//API???????
class MdApi : public CThostFtdcMdSpi
{
private:
	CThostFtdcMdApi* api;				//API????
	thread *task_thread;				//????????????python???????????
	ConcurrentQueue<Task> task_queue;	//???????

public:
	MdApi()
	{
		function0<void> f = boost::bind(&MdApi::processTask, this);
		thread t(f);
		this->task_thread = &t;
	};

	~MdApi()
	{
	};

	//-------------------------------------------------------------------------------------
	//API???????
	//-------------------------------------------------------------------------------------

	///???????????????????????????????¦Ä?????????¡Â????????¨¢?
	virtual void OnFrontConnected();

	///??????????????????????????¡Â????????¨¢???????????????API???????????????????????????
	///@param nReason ???????
	///        0x1001 ????????
	///        0x1002 ????§Õ???
	///        0x2001 ???????????
	///        0x2002 ???????????
	///        0x2003 ?????????
	virtual void OnFrontDisconnected(int nReason);

	///??????????µµ???????¦Ä???????????¡Â????????¨¢?
	///@param nTimeLapse ??????¦Í??????????
	virtual void OnHeartBeatWarning(int nTimeLapse);

	///??????????
	virtual void OnRspUserLogin(CThostFtdcRspUserLoginField *pRspUserLogin, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast);

	///??????????
	virtual void OnRspUserLogout(CThostFtdcUserLogoutField *pUserLogout, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast);

	///???????
	virtual void OnRspError(CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast);

	///???????????
	virtual void OnRspSubMarketData(CThostFtdcSpecificInstrumentField *pSpecificInstrument, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast);

	///??????????????
	virtual void OnRspUnSubMarketData(CThostFtdcSpecificInstrumentField *pSpecificInstrument, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast);

	///??????????
	virtual void OnRspSubForQuoteRsp(CThostFtdcSpecificInstrumentField *pSpecificInstrument, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast);

	///?????????????
	virtual void OnRspUnSubForQuoteRsp(CThostFtdcSpecificInstrumentField *pSpecificInstrument, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast);

	///?????????
	virtual void OnRtnDepthMarketData(CThostFtdcDepthMarketDataField *pDepthMarketData);

	///?????
	virtual void OnRtnForQuoteRsp(CThostFtdcForQuoteRspField *pForQuoteRsp);

	//-------------------------------------------------------------------------------------
	//task??????
	//-------------------------------------------------------------------------------------

	void processTask();

	void processFrontConnected(Task task);

	void processFrontDisconnected(Task task);

	void processHeartBeatWarning(Task task);

	void processRspUserLogin(Task task);

	void processRspUserLogout(Task task);

	void processRspError(Task task);

	void processRspSubMarketData(Task task);

	void processRspUnSubMarketData(Task task);

	void processRspSubForQuoteRsp(Task task);

	void processRspUnSubForQuoteRsp(Task task);

	void processRtnDepthMarketData(Task task);

	void processRtnForQuoteRsp(Task task);

	//-------------------------------------------------------------------------------------
	//data??????????????????
	//error?????????????????
	//id??????id
	//last??????????
	//i??????
	//-------------------------------------------------------------------------------------

	virtual void onFrontConnected(){};

	virtual void onFrontDisconnected(int i){};

	virtual void onHeartBeatWarning(int i){};

	virtual void onRspUserLogin(dict data, dict error, int id, bool last) {};

	virtual void onRspUserLogout(dict data, dict error, int id, bool last) {};

	virtual void onRspError(dict error, int id, bool last) {};

	virtual void onRspSubMarketData(dict data, dict error, int id, bool last) {};

	virtual void onRspUnSubMarketData(dict data, dict error, int id, bool last) {};

	virtual void onRspSubForQuoteRsp(dict data, dict error, int id, bool last) {};

	virtual void onRspUnSubForQuoteRsp(dict data, dict error, int id, bool last) {};

	virtual void onRtnDepthMarketData(dict data) {};

	virtual void onRtnForQuoteRsp(dict data) {};

	//-------------------------------------------------------------------------------------
	//req:?????????????????
	//-------------------------------------------------------------------------------------

	void createFtdcMdApi(string pszFlowPath = "");

	void release();

	void init();

	int join();

	int exit();

	string getTradingDay();

	void registerFront(string pszFrontAddress);

	int subscribeMarketData(string instrumentID);

	int unSubscribeMarketData(string instrumentID);

	int subscribeForQuoteRsp(string instrumentID);

	int unSubscribeForQuoteRsp(string instrumentID);

	int reqUserLogin(dict req, int nRequestID);

	int reqUserLogout(dict req, int nRequestID);
};
